#include <iostream>
using namespace std;

struct Nodo
{
	int dato;
	Nodo* derecho;
	Nodo* izquierdo;
};
//arbol listo para ser insertados en el arbol
Nodo* creatNodoPadresHijos(int n);
//arbol listo para ser usado
Nodo* arbolbinario = NULL;
void insertarNodosEnArbolBinario(Nodo*& arbolbinario, int n);
void mostrarArbolBinario(Nodo*& arbolbinario, int separador);
void preOrden(Nodo*& arbolbinario);
void posOrden(Nodo*& arbolbinario);
void inOrden(Nodo*& arbolbinario);

int main()
{
	int n;
	for (int i = 0; i < 9; i++)
	{
		cout << "Insertar nodos: ";
		cin >> n;
		insertarNodosEnArbolBinario(arbolbinario, n);
	}
	mostrarArbolBinario(arbolbinario, 0);
	cout << "Recorrido preorden: " << endl;
	preOrden(arbolbinario);
	cout << endl;
	cout << "Recorrido inorden: " << endl;
	inOrden(arbolbinario);
	cout << endl;
	cout << "Recorrido posorden: " << endl;
	posOrden(arbolbinario);
	return 0;
}
Nodo* creatNodoPadresHijos(int n)
{
	//inicializar el nodo
	Nodo* nuevo = new Nodo();
	//asignar los valores al nodo creado(instanciado)
	nuevo->dato = n;
	nuevo->derecho = NULL;
	nuevo->izquierdo = NULL;

	return nuevo;
}
void insertarNodosEnArbolBinario(Nodo*& arbolbinario, int n)
{
	if (arbolbinario == NULL)
	{
		Nodo* nuevo = creatNodoPadresHijos(n);
		arbolbinario = nuevo;
	}
	else
	{
		//insertar nodo raiz
		int datoRaiz = arbolbinario->dato;
		if (n < datoRaiz)
		{
			//insertar el siguiente nodo en el sub-izquierdo
			insertarNodosEnArbolBinario(arbolbinario->izquierdo, n);
		}
		else
		{
			//insertar el siguiente nodo en el sub-derecho
			insertarNodosEnArbolBinario(arbolbinario->derecho, n);
		}
	}
}
void mostrarArbolBinario(Nodo*& arbolbinario, int separador)
{
	if (arbolbinario == NULL)
	{
		return;
	}
	else
	{
		mostrarArbolBinario(arbolbinario->derecho, separador + 1);
		for (int i = 0; i < separador; i++)
		{
			cout << " ";
		}
		cout << arbolbinario->dato << endl;
		mostrarArbolBinario(arbolbinario->izquierdo, separador + 1);
	}
}
void preOrden(Nodo*& arbolbinario)
{
	if (arbolbinario == NULL)
	{
		return;
	}
	else
	{
		//r
		cout << arbolbinario->dato << " ";
		//i
		preOrden(arbolbinario->izquierdo);
		//d
		preOrden(arbolbinario->derecho);
	}
}
void inOrden(Nodo*& arbolbinario)
{
	if (arbolbinario == NULL)
	{
		return;
	}
	else
	{
		//i
		preOrden(arbolbinario->izquierdo);
		//r
		cout << arbolbinario->dato << " ";
		//d
		preOrden(arbolbinario->derecho);
	}
}
void posOrden(Nodo*& arbolbinario)
{
	if (arbolbinario == NULL)
	{
		return;
	}
	else
	{
		//i
		preOrden(arbolbinario->izquierdo);
		//d
		preOrden(arbolbinario->derecho);
		//r
		cout << arbolbinario->dato << " ";
	}
}
